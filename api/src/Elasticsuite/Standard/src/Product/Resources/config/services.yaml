imports:
    - { resource: elasticsearch/request_type.yaml }

services:
    Elasticsuite\Product\Service\GraphQl\FilterManager:
        arguments:
            - '@Elasticsuite\Product\GraphQl\Type\Definition\FieldFilterInputType'
            - '@Elasticsuite\Product\Service\CurrentCategoryProvider'

    Elasticsuite\Product\DataProvider\ProductDataProvider:
        arguments:
            - '@serializer'
            - '@api_platform.pagination'
            - '@api_platform.metadata.resource.metadata_factory.cached'
            - '@Elasticsuite\ResourceMetadata\Service\ResourceMetadataManager'
            - '@Elasticsuite\Metadata\Repository\MetadataRepository'
            - '@Elasticsuite\Catalog\Repository\LocalizedCatalogRepository'
            - '@Elasticsuite\Search\Elasticsearch\Builder\Request\SimpleRequestBuilder'
            - '@Elasticsuite\Search\Elasticsearch\Request\Container\Configuration\ContainerConfigurationProvider'
            - '@Elasticsuite\Search\Elasticsearch\Adapter'
            - '@Elasticsuite\Product\GraphQl\Type\Definition\SortInputType'
            - '@Elasticsuite\Product\Service\GraphQl\FilterManager'
        tags:
            - { name: api_platform.collection_data_provider }

    Elasticsuite\Product\Serializer\ProductDenormalizer:
        arguments:
            - '@Elasticsuite\Stitching\Service\SerializerService'
        tags:
            - { name: serializer.normalizer }

    # Declare DataFixtures
    Elasticsuite\Product\DataFixtures\ElasticsearchProductFixtures:
        arguments:
            - '@Elasticsuite\Fixture\Service\ElasticsearchFixtures'
            - '@Elasticsuite\Fixture\Service\EntityIndicesFixturesInterface'
        tags:
            - { name: doctrine.fixture.orm }
                
    Elasticsuite\Product\GraphQl\Type\Definition\SortOrder\CategoryDefaultSortOrderProvider:
        arguments:
            - '%api_platform.graphql.nesting_separator%'
        tags:
            - { name: elasticsuite.product_api.sort_order_provider, provider_name: 'category_default' }

    Elasticsuite\Product\GraphQl\Type\Definition\SortOrder\PriceDefaultSortOrderProvider:
        arguments:
            - '%api_platform.graphql.nesting_separator%'
        tags:
            - { name: elasticsuite.product_api.sort_order_provider, provider_name: 'price_default' }

    Elasticsuite\Product\GraphQl\Type\Definition\SortOrder\ScalarSortOrderProvider:
        arguments:
            - '%api_platform.graphql.nesting_separator%'
        tags:
            - { name: elasticsuite.product_api.sort_order_provider, provider_name: 'scalar' }

    Elasticsuite\Product\GraphQl\Type\Definition\SortOrder\StockDefaultSortOrderProvider:
        arguments:
            - '%api_platform.graphql.nesting_separator%'
        tags:
            - { name: elasticsuite.product_api.sort_order_provider, provider_name: 'stock_default' }

    Elasticsuite\Product\GraphQl\Type\Definition\SortInputType:
        arguments:
            - '@api_platform.graphql.types_container'
            - '@Elasticsuite\Metadata\Repository\SourceFieldRepository'
            - !tagged_iterator { tag: 'elasticsuite.product_api.sort_order_provider', index_by: 'provider_name' }
            - '%api_platform.graphql.nesting_separator%'
        tags:
            - { name: api_platform.graphql.type }

    Elasticsuite\Product\GraphQl\Type\Definition\FieldFilterInputType:
        arguments:
            - '@Elasticsuite\Search\Elasticsearch\Builder\Request\Query\Filter\FilterQueryBuilder'
            - !tagged_iterator { tag: 'elasticsuite.product_api.filter' }
            - '@Elasticsuite\Entity\GraphQl\Type\Definition\Filter\BoolFilterInputType'
            - '@Elasticsuite\Metadata\Repository\SourceFieldRepository'
        tags:
            - { name: api_platform.graphql.type }
    
    Elasticsuite\Product\GraphQl\Type\Definition\ProductRequestTypeEnumType:
        arguments:
            - '@Elasticsuite\Search\Elasticsearch\Request\Container\Configuration\ContainerConfigurationProvider'
        tags:
            - { name: api_platform.graphql.type }
    
    Elasticsuite\Product\Service\CurrentCategoryProvider:
        arguments:
            - '@Elasticsuite\Category\Repository\CategoryRepository'
            -
    Elasticsuite\Product\Decoration\GraphQl\AddEntityTypeInContext:
        decorates: api_platform.graphql.resolver.stage.serialize
        decoration_priority: 1
        arguments:
            - '@.inner'
            
    Elasticsuite\Product\Service\SearchSettingsProvider:
        arguments:
            - '%elasticsuite.search_settings%'
            
    Elasticsuite\Product\Elasticsearch\Request\Aggregation\Provider\CoverageAggregationProvider:
        arguments:
            - '@Elasticsuite\Metadata\Repository\SourceFieldRepository'
            - '@Elasticsuite\Search\Elasticsearch\Request\QueryFactory'
            - '@Elasticsuite\Product\Service\SearchSettingsProvider'
    
    elasticsuite.search.coverage.request.builder:
        parent: Elasticsuite\Search\Elasticsearch\Builder\Request\SimpleRequestBuilder

    Elasticsuite\Product\Elasticsearch\Request\Aggregation\CoverageProvider:
        arguments:
            - '@Elasticsuite\Search\Elasticsearch\Adapter'

    Elasticsuite\Product\Elasticsearch\Request\Aggregation\Modifier\Coverage:
        arguments:
            - '@elasticsuite.search.coverage.request.builder'
            - '@Elasticsuite\Product\Elasticsearch\Request\Aggregation\CoverageProvider'
            - '@Elasticsuite\Search\Elasticsearch\Request\Container\Configuration\ContainerConfigurationProvider'
            - '@Elasticsuite\Search\Repository\Facet\ConfigurationRepository'
            - '@Elasticsuite\Product\Service\CurrentCategoryProvider'
    
    elasticsuite.search.product.filterableSourceFields:
        parent: Elasticsuite\Search\Elasticsearch\Request\Aggregation\Provider\FilterableSourceFields
        arguments:
            $modifiersPool: {
                coverageModifier: '@Elasticsuite\Product\Elasticsearch\Request\Aggregation\Modifier\Coverage',
            }
