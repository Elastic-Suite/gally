imports:
    - { resource: elasticsearch/query_factory.yaml }
    - { resource: elasticsearch/aggregation_factory.yaml }
    - { resource: elasticsearch/query_assembler.yaml }
    - { resource: elasticsearch/aggregation_assembler.yaml }
    - { resource: elasticsearch/aggregation_resolver.yaml }
    - { resource: elasticsearch/request_type.yaml }

services:
    Elasticsuite\Search\Repository\Facet\ConfigurationRepository:
        arguments:
            - '@Doctrine\Persistence\ManagerRegistry'
        tags:
            - { name: doctrine.repository_service }

    # Use to remove eager loading extension from default item data provider.
    elasticsuite.search.dataprovider.item_data_provider.no_eager_loading:
        parent: api_platform.doctrine.orm.default.item_data_provider
        arguments:
            $itemExtensions: []

    # Use to remove eager loading extension from default item data provider.
    elasticsuite.search.dataprovider.collection_data_provider.no_eager_loading:
        parent: api_platform.doctrine.orm.default.collection_data_provider
        arguments:
            $collectionExtensions:
                - '@api_platform.doctrine.orm.query_extension.filter'
                - '@api_platform.doctrine.orm.query_extension.filter_eager_loading'
                - '@api_platform.doctrine.orm.query_extension.order'
                - '@api_platform.doctrine.orm.query_extension.pagination'

    Elasticsuite\Search\DataProvider\Facet\ConfigurationItemDataProvider:
        arguments:
            - '@doctrine'
            - '@elasticsuite.search.dataprovider.item_data_provider.no_eager_loading'
            - '@api_platform.doctrine.orm.default.item_data_provider'
        tags:
            - { name: api_platform.item_data_provider, priority: 2 }
        autoconfigure: false

    Elasticsuite\Search\DataProvider\Facet\ConfigurationCollectionDataProvider:
        arguments:
            - '@doctrine'
            - '@elasticsuite.search.dataprovider.collection_data_provider.no_eager_loading'
            - '@Elasticsuite\Metadata\Repository\MetadataRepository'
        tags:
            - { name: api_platform.collection_data_provider, priority: 2 }
        autoconfigure: false

    Elasticsuite\Search\DataPersister\Facet\ConfigurationDataPersister:
        arguments:
            - '@doctrine.orm.entity_manager'
        tags:
            - { name: api_platform.data_persister }

    Elasticsuite\DependencyInjection\GenericFactory:
        public: false

    Elasticsuite\Search\Elasticsearch\Adapter\Common\Request\SortOrder\Assembler:
        arguments:
            - '@Elasticsuite\Search\Elasticsearch\Adapter\Common\Request\Query\Assembler'

    elasticsuite.search.container.configuration.factory:
        parent: Elasticsuite\DependencyInjection\GenericFactory
        arguments:
            - 'Elasticsuite\Search\Elasticsearch\Request'

    Elasticsuite\Search\Elasticsearch\Request\ContainerConfigurationFactoryInterface: '@elasticsuite.search.container.configuration.factory'
    
    Elasticsuite\Search\Elasticsearch\Request\Aggregation\Provider\GenericAggregationProvider: ~
    
    Elasticsuite\Search\Elasticsearch\Request\Aggregation\Provider\FilterableSourceFields:
        arguments:
            - '@Elasticsuite\Search\Repository\Facet\ConfigurationRepository'
            - '@Elasticsuite\Product\Service\CurrentCategoryProvider'
            - !tagged_iterator { tag: 'elasticsuite.search.aggregation.resolver' }
            - {
                coverageModifier: '@Elasticsuite\Search\Elasticsearch\Request\Aggregation\Modifier\Coverage',
                viewMore: '@Elasticsuite\Search\Elasticsearch\Request\Aggregation\Modifier\ViewMore',
            }

    elasticsuite.search.request.factory:
        class: Elasticsuite\Search\Elasticsearch\RequestFactory

    Elasticsuite\Search\Elasticsearch\RequestFactoryInterface:
        public: true
        alias: elasticsuite.search.request.factory
        
    Elasticsuite\Search\Elasticsearch\Builder\Request\Query\Fulltext\SearchableFieldFilter: ~
    Elasticsuite\Search\Elasticsearch\Builder\Request\Query\Fulltext\FuzzyFieldFilter: ~
    
    Elasticsuite\Search\Elasticsearch\Builder\Request\Query\Fulltext\FulltextQueryBuilder:
        arguments:
            - '@Elasticsuite\Search\Elasticsearch\Request\QueryFactory'
            - '@Elasticsuite\Search\Elasticsearch\Builder\Request\Query\Fulltext\SearchableFieldFilter'
            - '@Elasticsuite\Search\Elasticsearch\Builder\Request\Query\Fulltext\FuzzyFieldFilter'

    Elasticsuite\Search\Elasticsearch\Builder\Request\Query\QueryBuilder:
        arguments:
            - '@Elasticsuite\Search\Elasticsearch\Request\QueryFactory'
            - '@Elasticsuite\Search\Elasticsearch\Builder\Request\Query\Fulltext\FulltextQueryBuilder'
            - '@Elasticsuite\Search\Elasticsearch\Builder\Request\Query\Filter\FilterQueryBuilder'

    Elasticsuite\Search\Elasticsearch\Builder\Request\Query\Filter\FilterQueryBuilder:
        arguments:
            - '@Elasticsuite\Search\Elasticsearch\Request\QueryFactory'

    Elasticsuite\Search\Elasticsearch\Builder\Request\SortOrder\SortOrderBuilder:
        arguments:
            - '@Elasticsuite\Search\Elasticsearch\Builder\Request\Query\Filter\FilterQueryBuilder'

    Elasticsuite\Search\Elasticsearch\Builder\Request\Aggregation\AggregationBuilder:
        arguments:
            - '@Elasticsuite\Search\Elasticsearch\Request\AggregationFactory'
            - '@Elasticsuite\Search\Elasticsearch\Builder\Request\Query\Filter\FilterQueryBuilder'
                
    Elasticsuite\Search\Elasticsearch\Spellchecker:
        arguments:
            - '@api_platform.elasticsearch.client'
            - '@Elasticsuite\Cache\Service\CacheManagerInterface'

    Elasticsuite\Search\Elasticsearch\Builder\Request\SimpleRequestBuilder:
        arguments:
            - '@Elasticsuite\Search\Elasticsearch\RequestFactoryInterface'
            - '@Elasticsuite\Search\Elasticsearch\Builder\Request\Query\QueryBuilder'
            - '@Elasticsuite\Search\Elasticsearch\Builder\Request\SortOrder\SortOrderBuilder'
            - '@Elasticsuite\Search\Elasticsearch\Builder\Request\Aggregation\AggregationBuilder'
            - '@Elasticsuite\Search\Elasticsearch\Spellchecker\RequestFactoryInterface'
            - '@Elasticsuite\Search\Elasticsearch\Spellchecker'

    Elasticsuite\Search\Elasticsearch\Builder\Response\AggregationBuilder: ~

    Elasticsuite\Search\Elasticsearch\Adapter\Common\Request\Mapper:
        arguments:
            - '@Elasticsuite\Search\Elasticsearch\Adapter\Common\Request\Query\Assembler'
            - '@Elasticsuite\Search\Elasticsearch\Adapter\Common\Request\SortOrder\Assembler'
            - '@Elasticsuite\Search\Elasticsearch\Adapter\Common\Request\Aggregation\Assembler'

    Elasticsuite\Search\Elasticsearch\Adapter:
        arguments:
            - '@Elasticsuite\Search\Elasticsearch\Adapter\Common\Request\Mapper'
            - '@api_platform.elasticsearch.client'
            - '@Elasticsuite\Search\Elasticsearch\Builder\Response\AggregationBuilder'
            - '@logger'

    Elasticsuite\Search\GraphQl\Type\Definition\SortEnumType:
        lazy: true
        tags:
            - { name: api_platform.graphql.type }

    Elasticsuite\Search\GraphQl\Type\Definition\SortInputType:
        arguments:
            - '@Elasticsuite\Search\GraphQl\Type\Definition\SortEnumType'
        tags:
            - { name: api_platform.graphql.type }

    Elasticsuite\Search\GraphQl\Type\Definition\SortOptionType:
        arguments:
            - '@Elasticsuite\Search\GraphQl\Type\Definition\SortEnumType'
        tags:
            - { name: api_platform.graphql.type }

    Elasticsuite\Search\GraphQl\Type\Definition\FieldFilterInputType:
        arguments:
            - {
                boolFilter: '@Elasticsuite\Search\GraphQl\Type\Definition\Filter\BoolFilterInputType',
                equalFilter: '@Elasticsuite\Search\GraphQl\Type\Definition\Filter\EqualTypeFilterInputType',
                matchFilter: '@Elasticsuite\Search\GraphQl\Type\Definition\Filter\MatchFilterInputType',
                rangeFilter: '@Elasticsuite\Search\GraphQl\Type\Definition\Filter\RangeFilterInputType',
                existFilter: '@Elasticsuite\Search\GraphQl\Type\Definition\Filter\ExistFilterInputType',
            }
            - '@Elasticsuite\Search\Elasticsearch\Builder\Request\Query\Filter\FilterQueryBuilder'
        tags:
            - { name: api_platform.graphql.type }

    Elasticsuite\Search\GraphQl\Type\Definition\Filter\BoolFilterInputType:
        lazy: true
        arguments:
            - '@Elasticsuite\Search\GraphQl\Type\Definition\FieldFilterInputType'
            - '@Elasticsuite\Search\Elasticsearch\Request\QueryFactory'
        tags:
            - { name: api_platform.graphql.type }

    Elasticsuite\Search\GraphQl\Type\Definition\Filter\ExistFilterInputType:
        lazy: true
        arguments:
            - '@Elasticsuite\Search\Service\ReverseSourceFieldProvider'
            - '@Elasticsuite\Search\Elasticsearch\Request\QueryFactory'
        tags:
            - { name: api_platform.graphql.type }

    Elasticsuite\Search\GraphQl\Type\Definition\Filter\EqualTypeFilterInputType:
        arguments:
            - '@Elasticsuite\Search\Elasticsearch\Builder\Request\Query\Filter\FilterQueryBuilder'
            - '@Elasticsuite\Search\Service\ReverseSourceFieldProvider'
        tags:
            - { name: api_platform.graphql.type }

    Elasticsuite\Search\GraphQl\Type\Definition\Filter\MatchFilterInputType:
        arguments:
            - '@Elasticsuite\Search\Elasticsearch\Builder\Request\Query\Filter\FilterQueryBuilder'
            - '@Elasticsuite\Search\Service\ReverseSourceFieldProvider'
        tags:
            - { name: api_platform.graphql.type }

    Elasticsuite\Search\GraphQl\Type\Definition\Filter\RangeFilterInputType:
        arguments:
            - '@Elasticsuite\Search\Elasticsearch\Builder\Request\Query\Filter\FilterQueryBuilder'
            - '@Elasticsuite\Search\Service\ReverseSourceFieldProvider'
        tags:
            - { name: api_platform.graphql.type }

    Elasticsuite\Search\Service\GraphQl\FilterManager:
        arguments:
            - '@Elasticsuite\Search\GraphQl\Type\Definition\FieldFilterInputType'
            - '%api_platform.graphql.nesting_separator%'

    Elasticsuite\Search\DataProvider\DocumentDataProvider:
        arguments:
            - '@serializer'
            - '@api_platform.pagination'
            - '@Elasticsuite\Metadata\Repository\MetadataRepository'
            - '@Elasticsuite\Catalog\Repository\LocalizedCatalogRepository'
            - '@Elasticsuite\Search\Elasticsearch\Builder\Request\SimpleRequestBuilder'
            - '@Elasticsuite\Search\Elasticsearch\Request\Container\Configuration\ContainerConfigurationProvider'
            - '@Elasticsuite\Search\Elasticsearch\Adapter'
            - '@Elasticsuite\Search\Service\GraphQl\FilterManager'
        tags:
            - { name: api_platform.collection_data_provider }

    Elasticsuite\Search\Serializer\DocumentDenormalizer:
        tags:
            - { name: serializer.normalizer }

    Elasticsuite\Search\Resolver\DummyResolver:
        tags:
            - { name: api_platform.graphql.query_resolver }
            
    Elasticsuite\Search\Decoration\GraphQl\AddAggregationsType:
        decorates: api_platform.graphql.type_builder
        arguments:
            - '@api_platform.graphql.types_container'
            - '@.inner'
            
    Elasticsuite\Search\Decoration\GraphQl\AddAggregationsData:
        decorates: api_platform.graphql.resolver.stage.serialize
        decoration_priority: 10
        arguments:
#            - '@api_platform.graphql.types_container'
            - '@.inner'
            - '@Elasticsuite\Metadata\Repository\MetadataRepository'
            - '@Elasticsuite\Search\Elasticsearch\Request\Container\Configuration\ContainerConfigurationProvider'
            - '@Elasticsuite\Catalog\Repository\LocalizedCatalogRepository'
            - '@Elasticsuite\Search\Repository\Facet\ConfigurationRepository'
            - '@Elasticsuite\Product\Service\CurrentCategoryProvider'
            - '@Elasticsuite\Search\Service\ReverseSourceFieldProvider'
            - !tagged_iterator { tag: 'elasticsuite.entity_api.filter' }
            
    Elasticsuite\Search\Decoration\GraphQl\AddAggregationsInContext:
        decorates: api_platform.graphql.serializer.context_builder
        arguments:
            - '@.inner'
    
    Elasticsuite\Search\Elasticsearch\Request\Container\RelevanceConfiguration\GenericRelevanceConfiguration:
        arguments:
            - '%elasticsuite.relevance%'
    
    Elasticsuite\Search\Decoration\GraphQl\AddSortInfoType:
        decorates: api_platform.graphql.type_builder
        arguments:
            - '@api_platform.graphql.types_container'
            - '@Elasticsuite\Search\GraphQl\Type\Definition\SortOptionType'
            - '@.inner'

    Elasticsuite\Search\Decoration\GraphQl\AddSortInfoData:
        decorates: api_platform.graphql.resolver.stage.serialize
        decoration_priority: 2
        arguments:
            - !tagged_iterator { tag: 'elasticsuite.product_api.sort_order_provider', index_by: 'provider_name' }
            - '@Elasticsuite\Search\Service\ReverseSourceFieldProvider'
            - '@Elasticsuite\Metadata\Repository\MetadataRepository'
            - '@.inner'

    Elasticsuite\Search\Elasticsearch\Request\Container\Configuration\ContainerConfigurationProvider: ~
    
    
    elasticsuite.search.spellchecker.request.factory:
        class: Elasticsuite\Search\Elasticsearch\Spellchecker\RequestFactory

    Elasticsuite\Search\Elasticsearch\Spellchecker\RequestFactoryInterface:
        public: true
        alias: elasticsuite.search.spellchecker.request.factory

    Elasticsuite\Search\EventSubscriber\GenerateFacetConfigurationId:
        tags:
            - { name: doctrine.event_subscriber }
                
    Elasticsuite\Search\Service\SearchSettingsProvider:
        arguments:
            - '%elasticsuite.search_settings%'
    
    Elasticsuite\Search\Service\ReverseSourceFieldProvider:
        arguments:
            - '@Elasticsuite\Metadata\Repository\SourceFieldRepository'
            - '%api_platform.graphql.nesting_separator%'

    Elasticsuite\Search\Elasticsearch\Request\Aggregation\CoverageProvider:
        arguments:
            - '@Elasticsuite\Search\Elasticsearch\Adapter'

    Elasticsuite\Search\Elasticsearch\Request\Aggregation\Modifier\Coverage:
        arguments:
            - '@Elasticsuite\Search\Elasticsearch\Builder\Request\SimpleRequestBuilder'
            - '@Elasticsuite\Search\Elasticsearch\Request\Aggregation\CoverageProvider'
            - '@Elasticsuite\Search\Elasticsearch\Request\Container\Configuration\ContainerConfigurationProvider'

    Elasticsuite\Search\Elasticsearch\Request\Aggregation\Provider\CoverageAggregationProvider:
        arguments:
            - '@Elasticsuite\Metadata\Repository\SourceFieldRepository'
            - '@Elasticsuite\Search\Elasticsearch\Request\QueryFactory'
            - '@Elasticsuite\Search\Service\SearchSettingsProvider'
                
    Elasticsuite\Search\Service\ViewMoreContext: ~

    Elasticsuite\Search\Elasticsearch\Request\Aggregation\Modifier\ViewMore:
        arguments:
            - '@Elasticsuite\Search\Service\ViewMoreContext'
                
    Elasticsuite\Search\DataProvider\Facet\OptionDataProvider:
        arguments:
            - '@Elasticsuite\Metadata\Repository\MetadataRepository'
            - '@Elasticsuite\Catalog\Repository\LocalizedCatalogRepository'
            - '@Elasticsuite\Search\Elasticsearch\Request\Container\Configuration\ContainerConfigurationProvider'
            - '@Elasticsuite\Search\Elasticsearch\Builder\Request\SimpleRequestBuilder'
            - '@Elasticsuite\Search\Elasticsearch\Adapter'
            - '@Elasticsuite\Search\Service\GraphQl\FilterManager'
            - '@Elasticsuite\Search\Service\ViewMoreContext'
            - '@Elasticsuite\Search\Service\ReverseSourceFieldProvider'
            - '%api_platform.graphql.nesting_separator%'
        tags:
            - { name: api_platform.collection_data_provider }

    elasticsuite.container_configuration.coverage_rate.factory:
        parent: 'Elasticsuite\Search\Elasticsearch\Request\Container\Configuration\GenericContainerConfigurationFactory'
        arguments:
            $aggregationProvider: '@Elasticsuite\Search\Elasticsearch\Request\Aggregation\Provider\CoverageAggregationProvider'
        tags:
            - { name: elasticsuite.container_configuration.factory, requestType: coverage_rate }
