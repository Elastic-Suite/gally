name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
    types: [review_requested, ready_for_review, synchronize]
  workflow_dispatch: ~

jobs:
  tests:
    if: github.event.pull_request.draft == false
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Pull images
        run: docker-compose pull --ignore-pull-failures || true
      - name: Start services
        run: docker-compose up --build -d
      - name: Wait for services
        run: |
          while status="$(docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" "$(docker-compose ps -q php)")"; do
            case $status in
              starting) sleep 1;;
              healthy) exit 0;;
              unhealthy)
                docker-compose ps
                docker-compose logs
                exit 1
              ;;
            esac
          done
          exit 1
      - name: Check HTTP reachability
        run: curl -v -o /dev/null http://localhost
      - name: Check HTTPS reachability
        run: curl  -vk -o /dev/null https://localhost
      - name: Create test database
        run: |
          docker-compose exec -e XDEBUG_MODE=off -T php bin/console -e test doctrine:database:create
          docker-compose exec -e XDEBUG_MODE=off -T php bin/console -e test doctrine:migrations:migrate --no-interaction
      - name: Doctrine Schema Validator
        run: docker-compose exec -e XDEBUG_MODE=off -T php bin/console doctrine:schema:validate --skip-sync          
      - name: PHPUnit
        run: docker-compose exec -e XDEBUG_MODE=off -T php bin/phpunit
      - name: Coverage
        run: docker-compose exec -e XDEBUG_MODE=coverage -T php bin/phpunit --coverage-clover=coverage/coverage.xml src/Elasticsuite
      
      - name: Cleanup coverage file
        run: docker-compose exec -T php sed -i 's:<file name="/srv/:<file name="/:' coverage/coverage.xml
        
      - if: ${{ github.event_name == 'pull_request' }}
        name: Download artifact
        uses: dawidd6/action-download-artifact@v2.14.1
        continue-on-error: true
        id: base_coverage_report
        with:
          workflow: .github/workflows/ci.yml
          branch: ${{ github.base_ref }}
          name: coverage-report
          path: coverage/base # Retrieve previous coverage file at the root directory, not inside api/coverage

      - name: Backend Coverage Report as Comment (Compared to a base)
        if: ${{ github.event_name == 'pull_request' && steps.base_coverage_report.outcome == 'success' }}
        uses: lucassabreu/comment-coverage-clover@main
        continue-on-error: true
        with:
          with-chart: false
          file: api/coverage/coverage.xml
          base-file: coverage/base/coverage.xml
          max-line-coverage-decrease: 10.0
          max-method-coverage-decrease: 10.0
          min-line-coverage: 75
          min-method-coverage: 75
          signature: "Backend Coverage compared to target branch"

      - name: Backend Coverage Report as Comment (Clean)
        uses: lucassabreu/comment-coverage-clover@v0.3.0
        if: ${{ (github.event_name == 'pull_request' && steps.base_coverage_report.outcome != 'success') || github.event_name == 'push'}}
        with:
          with-chart: false
          file: api/coverage/coverage.xml
          signature: "Backend Coverage of this branch"

      - uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: api/coverage/coverage.xml
                  
      - name: Jest
        run: docker-compose exec -T pwa yarn test --ci --passWithNoTests

      - name: Frontend Coverage Report
        uses: 5monkeys/cobertura-action@v12
        if: ${{ github.event_name == 'pull_request' }}
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          report_name: "Frontend Coverage of this branch"
          path: pwa/coverage/cobertura-coverage.xml
          minimum_coverage: 1
          fail_below_threshold: false
          
  Deploy:
    needs: tests
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2 
      - name: Deploy in EC2
        env:
            PRIVATE_KEY: ${{ secrets.AWS_DEPLOY_KEY }}
            HOSTNAME : ${{ secrets.AWS_HOSTNAME }}
            USER_NAME : ${{ secrets.AWS_USER }}
            APP_SECRET: ${{ secrets.APP_SECRET }}
            POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
            
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} "
            cd /home/ubuntu/standalone &&
            docker system prune -af &&
            docker volume prune -f &&
            docker-compose down &&
            git checkout master &&
            git fetch --all &&
            git reset --hard origin/master &&
            git pull origin master &&
            SERVER_NAME=$HOSTNAME APP_SECRET=$APP_SECRET POSTGRES_PASSWORD=$POSTGRES_PASSWORD docker-compose -f docker-compose.yml -f docker-compose.int.yml up -d --build 
          "
