name: Deploy integration

on:
  workflow_call:
    inputs:
      version:
        description: "Version of Gally's packages (ex: master or 1.0.x)"
        required: true
        type: string
      last_published_version:
        description: "Last release of the current version"
        required: false
        default: "dev-master"
        type: string
      back_version_is_tag:
        description: "Back version to deploy is a tag ?"
        required: false
        default: false
        type: boolean
      front_version_is_tag:
        description: "Front version to deploy is a tag ?"
        required: false
        default: false
        type: boolean
    secrets:
      AWS_DEPLOY_KEY:
        required: true
      AWS_HOSTNAME:
        required: true
      AWS_USER:
        required: true
      APP_SECRET:
        required: true
      POSTGRES_PASSWORD:
        required: true
      COMPOSER_AUTH:
        required: true
      PACKAGIST_URL:
        required: true
      MEDIA_URL:
        required: false

jobs:
  deploy:
    name: Integration
    runs-on: ubuntu-latest
    
    steps:      
      - name: Deploy in EC2
        env:
            back_branch: ${{ inputs.back_version_is_tag == true && format('tags/{0}', inputs.version) || format('origin/{0}', inputs.version) }}
            front_branch: ${{ inputs.version == 'master' && 'origin/main' || inputs.front_version_is_tag == true && format('tags/v{0}', inputs.version) || format('origin/{0}', inputs.version) }}
            composer_version: ${{ inputs.version == 'master' && 'dev-master' || (contains(inputs.version, 'x') && format('{0}-dev', inputs.version) || inputs.version) }}
            PRIVATE_KEY: ${{ secrets.AWS_DEPLOY_KEY }}
            HOSTNAME : ${{ secrets.AWS_HOSTNAME }}
            USER_NAME : ${{ secrets.AWS_USER }}
            APP_SECRET: ${{ secrets.APP_SECRET }}
            POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
            COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}
            PACKAGIST_URL: ${{ secrets.PACKAGIST_URL }}
            MEDIA_URL: ${{ secrets.MEDIA_URL }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} "
            cd /home/ubuntu/ &&
            [ -d gally ] || git clone https://github.com/Elastic-Suite/gally.git gally &&
            cd /home/ubuntu/gally &&
            docker system prune -af &&
            ([[ $(docker volume ls -q | awk '!/_/' | wc -l) -eq 0 ]] || docker volume rm $(docker volume ls -q | awk '!/_/' | tr '\n' ' ')) &&
            make .env &&
            POSTGRES_PASSWORD=$POSTGRES_PASSWORD docker compose -f compose.yml -f compose.int.yml up -d database &&
            docker-compose down &&
            git fetch --all && git reset --hard  && git checkout ${{ env.back_branch }} &&
            [ -d front/gally-admin ] || git clone https://github.com/Elastic-Suite/gally-admin.git front/gally-admin &&
            cd front/gally-admin && git fetch --all && git reset --hard && git checkout ${{ env.front_branch }} &&
            cd /home/ubuntu/gally &&
            docker-compose run --rm php rm -rf vendor/gally/gally-premium &&
            docker-compose run --rm php composer config repositories.gally-premium composer $PACKAGIST_URL &&
            docker-compose run --rm -e COMPOSER_AUTH='$COMPOSER_AUTH' php composer require \"gally/gally-standard:${{ env.composer_version }} as ${{ inputs.last_published_version }}\" &&
            docker-compose run --rm -e COMPOSER_AUTH='$COMPOSER_AUTH' php composer require \"gally/gally-premium:${{ env.composer_version }}\" &&
            [ -z ${MEDIA_URL} ] || echo -e \"gally:\n  base_url:\n    media: '$MEDIA_URL'\" > api/config/packages/gally_configuration.yaml &&
            SERVER_NAME=$HOSTNAME APP_SECRET=$APP_SECRET POSTGRES_PASSWORD=$POSTGRES_PASSWORD COMPOSER_AUTH='$COMPOSER_AUTH' docker-compose -f docker-compose.yml -f docker-compose.int.yml up -d --build
          "
